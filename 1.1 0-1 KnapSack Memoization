class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int dp[][]=new int[n+1][W+1];
        for(int arr[]: dp){
            Arrays.fill(arr, -1);
        }
        return fun(W, wt, val, n, dp);
    } 
    static int fun(int W, int wt[], int val[], int n, int dp[][]) 
    { 
        if(n==0 || W==0){
            return 0;
        }
        if(dp[n][W]!=-1){
            return dp[n][W];
        }
        int ans = 0;
        if(wt[n-1]<=W){
            ans = Math.max(
                val[n-1] + fun(W-wt[n-1], wt, val, n-1, dp), 
                fun(W, wt, val, n-1, dp)
                );
        }else{
            ans = fun(W, wt, val, n-1, dp);
        }
        return dp[n][W] = ans;
    } 
}
