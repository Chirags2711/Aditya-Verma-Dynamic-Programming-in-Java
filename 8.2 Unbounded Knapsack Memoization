class Solution{
    static int knapSack(int N, int W, int val[], int wt[])
    {
        int dp[][]=new int[N+1][W+1];
        for(int arr[]: dp){
            Arrays.fill(arr, -1);
        }
        return fun(N, W, val, wt, dp);
    }
    static int fun(int N, int W, int val[], int wt[], int[][]dp){
        if(W==0 || N==0) return 0;
        if(dp[N][W]!=-1) return dp[N][W];
        int ans;
        if(wt[N-1]<=W){
            ans = Math.max(fun(N-1, W, val, wt, dp), val[N-1] + fun(N, W-wt[N-1], val, wt, dp));
        }else{
            ans = fun(N-1, W, val, wt, dp);
        }
        return dp[N][W]=ans;
    }
}
