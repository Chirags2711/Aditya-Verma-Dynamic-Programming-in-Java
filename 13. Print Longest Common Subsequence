//Code Studio
public class Solution {
    public static String findLCS(int n, int m, String s1, String s2){
        int dp[][]=new int[n+1][m+1];
        for(int i=0; i<=n; i++){
            dp[i][0] = 0;
        }
        for(int i=0; i<=m; i++){
            dp[0][i] = 0;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                int ans;
                if(s1.charAt(i-1)==s2.charAt(j-1)){
                    ans = 1 + dp[i-1][j-1];
                }else{
                    ans = Math.max(dp[i-1][j], dp[i][j-1]);
                }
                dp[i][j] = ans;
            }
        }
        String res = "";
        int i = n, j = m;
        while(i>0 && j>0){
            if(s1.charAt(i-1)==s2.charAt(j-1)){
                res=s1.charAt(i-1)+res;
                i--;
                j--;
            }else{
                if(dp[i-1][j] > dp[i][j-1]){
                    i--;
                }else{
                    j--;
                }
            }
        }
        return res;

    }
}



//If print all(TLE)(gfg):
class Solution
{
    public List<String> all_longest_common_subsequences(String s1, String s2)
    {
        int n = s1.length();2
        int m = s2.length();
        int dp[][]=new int[n+1][m+1];
        for(int i=0; i<=n; i++){
            dp[i][0] = 0;
        }
        for(int i=0; i<=m; i++){
            dp[0][i] = 0;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                int ans;
                if(s1.charAt(i-1)==s2.charAt(j-1)){
                    ans = 1 + dp[i-1][j-1];
                }else{
                    ans = Math.max(dp[i-1][j], dp[i][j-1]);
                }
                dp[i][j] = ans;
            }
        }
        List<String> list = new ArrayList<>();
        TreeSet<String> set = new TreeSet<>();
        rec(n, m, s1, s2, "", dp, set);
        for(String s: set){
            list.add(s);
        }
        return list;
    }
    public void rec(int i, int j, String s1, String s2, String str, int[][]dp, TreeSet<String> set){
        if(i==0 || j==0){
            set.add(new String(str));
            return;
        }
        if(s1.charAt(i-1)==s2.charAt(j-1)){
            str = s1.charAt(i-1) + str;
            rec(i-1, j-1, s1, s2, str, dp, set);
        }else{
            if(dp[i-1][j] > dp[i][j-1]){
                    rec(i-1, j, s1, s2, str, dp, set);
            }else if(dp[i-1][j] < dp[i][j-1]){
                    rec(i, j-1, s1, s2, str, dp, set);
            }else{
                rec(i-1, j, s1, s2, str, dp, set);
                rec(i, j-1, s1, s2, str, dp, set);
            }
        }
    }
}
