class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int eggDrop(int n, int k) 
	{
	    int dp[][] = new int[n+1][k+1];
	    for(int arr[]: dp){
	        Arrays.fill(arr, -1);
	    }
	    return eggDropHelper(n, k, dp);
	}
    static int eggDropHelper(int n, int k, int[][]dp) 
	{
	    if(k==0 || k==1) return k;
	    if(n==1) return k;
	    if(dp[n][k]!=-1) return dp[n][k];
	    int ans = Integer.MAX_VALUE;
	    for(int f=1; f<=k; f++){ 
	        //Where do we try to throw at this move. It doesn't mean that we have checked till f
	        int broke = eggDropHelper(n-1, f-1, dp);
	        int notBroke = eggDropHelper(n, k-f, dp);
	        int temp = 1 + Math.max(broke ,notBroke);
	        ans = Math.min(temp, ans);
	    }
	    return dp[n][k] = ans;
	}
}
